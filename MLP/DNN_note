# MLP

 퍼셉트론은 실제 뇌를 구성하는 신경 세포 뉴런의 동작과 유사한데, 신경 세포 뉴런의 그림을 먼저 보겠음.
뉴런은 가지돌기에서 신호를 받아들이고, 이 신호가 일정치 이상의 크기를 가지면 축삭돌기를 통해서 신호를 전달.   

![image.png](attachment:61f94d9f-16f8-4dd2-a3e7-cd0222c8f3d0:image.png)

### 퍼셉트론

:**입력 신호의 가중치 합을 받아 하나의 출력을 내보내는 초기 인공 신경망 모델**

![image.png](attachment:27a2a347-76bf-4605-88f0-fb109ac0ba0d:image.png)

각각의 입력값에는 각각의 가중치가 존재하는데, 이때 가중치의 값이 크면 클수록 해당 입력 값이 중요하다는 것을 의미. 
각 입력값이 가중치와 곱해져서 인공뉴런에 보내지고, 각 입력값과 그에 해당되는 가중치의 곱의 전체 합이 임계치를 넘으면 종착지에 있는 인공 뉴런은 출력 신호로서 1을 출력하고, 그렇지 않은 경우에는 0을 출력.
이러한 함수를 계단함수라고하며 이 계단함수는  퍼셉트론의 활성화 함수.

이때 바이어스가 없으면 저 입력값과 가중치곱의 선형결합이 원점에서 벗아나지를 못함. 그렇게 되면 표현 가능한 함수의 종류가 굉장히 줄어들음. 따라서 바이어스는 모델이 원점을 벗어나 더 많은 형태를 표현하도록 자유도를 주는 역할.

활성화함수는
비선형 함수여야 합니다. 
인공 신경망의 능력을 높이기 위해서는 은닉층을 계속해서 추가해야 합니다. 그런데 만약 활성화 함수로 선형 함수를 사용하게 되면 은닉층을 쌓을 수가 없습니다.
 예를 들어 활성화 함수로 선형 함수를 선택하고, 층을 계속 쌓는다고 가정해보겠습니다. 
활성화 함수는 f(x) = wx 라고 가정합니다. 
여기다가 은닉층을 두 개 추가한다고하면 출력층을 포함해서 y(x)=f(f(f(x))) . 이를 식으로 표현하면 wwwx 입니다. 
그런데 이는 잘 생각해보면 w의 세 제곱값을 k라고 정의해버리면
y(x) = kx 와 같이 다시 표현이 가능합니다. 이 경우, 선형 함수로 은닉층을 여러번 추가하더라도 1회 추가한 것과 차이가 없음을 알 수 있습니다.

---

### 단층 퍼셉트론

위에서 배운 퍼셉트론을 단층 퍼셉트론. 
단층 퍼셉트론은 값을 보내는 단계와 값을 받아서 출력하는 두단계로만 존재 이때 각 단계를 **layer라고함.** 
**(값을 보내는 단계는 입력층 , 값을 받아서 출력하는 단계는 출력층)

독립변수들을 과 bias를 선형으로 결합한 것을 활성화 함수 계단함수에 넣으면 결과 y가 나옴** 

![image.png](attachment:ead96fac-baab-4966-858c-2f571711d3f1:image.png)

![image.png](attachment:01fd170a-230c-40f2-90b5-8ac774115b18:image.png)

AND 게이트를 구현한 코드

```jsx
def AND_gate(x1, x2):
    w1 = 0.5
    w2 = 0.5
    b = -0.7
    result = x1*w1 + x2*w2 + b
    if result <= 0:
        return 0
    else:
        return 1
        
print(AND_gate(0, 0))  # 0
print(AND_gate(0, 1))  # 0
print(AND_gate(1, 0))  # 0
print(AND_gate(1, 1))  # 1
```

![image.png](attachment:681192f4-e9cf-4a45-91fa-3392b7e44136:image.png)

![image.png](attachment:d4004bff-1a92-40d2-a333-81faf67f57e0:image.png)

코드를 x1과 x2에대한 그래프로 그려보면 두 클래스(0,1)을 분류하는 선이 그어짐.
이선이 **결정경계**
:**서로 다른 데이터 클래스를 구분하는 경계**
(  **지금은 독립변수가 2개이니 선으로 보이는거고 독립변수가 3개이면 평면 3개를 넘어가면 우리가 눈으로 보지 못하는 형태.** )

 

코드들을 보면 AND,NAND 게이트를 만족하기 위해 파라미터를 설정 하지만 XOR 게이트는 구현불가

<XOR 게이트>

![image.png](attachment:394f81ee-bcbd-48c3-a7c4-0114d2b63197:image.png)

Why??

: 단층 퍼셉트론은 직선 하나로 두 영역을 나눌 수 있는 문제에 대해서만 구현이 가능. 위의 이미지를 보면 최소한 2개의 선이 존재해야함. 이를 해결하기 위해서 다층 퍼셉트론인  MLP임.  

 

## 다층퍼셉트론

**(MultiLayer Perceptron, MLP)**

다층 퍼셉트론과 단층 퍼셉트론의 차이는 단층 퍼셉트론은 입력층과 출력층만 존재하지만, 다층 퍼셉트론은 중간에 층을 더 추가하였다는 점입니다.

이렇게 입력층과 출력층 사이에 존재하는 층을 **은닉층**이라고함.  (이 은닉층은 사용자가 설정하기 나름)

<XOR 게이트>

![image.png](attachment:19c6393f-06d9-42e2-bb54-6f70df8db7e4:image.png)

![image.png](attachment:bc6d2cb3-4470-4619-b32e-2ff45b9957b4:image.png)

이와같이 은닉층이 2개 이상인 신경망을 **심층 신경망(Deep Neural Network, DNN)** 이라고함.

---

---

### 

### **(1) 활성화 함수의 특징 - 비선형 함수(Nonlinear function)**

활성화 함수의 특징은 선형 함수가 아닌 비선형 함수여야 한다는 점입니다.

선형 함수란 출력이 입력의 선형결합 식으로 나타낼수 있으면 선형함수라고 합니다. 
예를 들어   f(x) = wx +b    라는 함수가 있을 때, w 와 b는 상수입니다. 이 식을 그래프로 시각화하면 직선입니다. 

반대로 비선형 함수는 출력이 입력의 선형결합으로 나타낼수 없으며, 직선 1개로는 그릴 수 없는 함수를 말합니다.

인공 신경망에서 활성화 함수는 비선형 함수여야 합니다.
인공 신경망의 능력을 높이기 위해서는 은닉층을 계속해서 추가해야 합니다. 그런데 만약 활성화 함수로 선형 함수를 사용하게 되면 은닉층을 쌓을 수가 없습니다. 

예를 들어 활성화 함수로 선형 함수를 선택하고, 층을 계속 쌓는다고 가정해보겠습니다.
 활성화 함수는    f(x) = wx 라고 가정합니다.
 여기다가 은닉층을 두 개 추가한다고하면 출력층을 포함해서 y(x) =f(f(f(x)))  가 됩니다. 이를 식으로 표현하면    w*w*w*x  입니다. 
그런데 이는 잘 생각해보면   w 의 세 제곱값을   k라고 정의해버리면            y(x) =  kx    와 같이 다시 표현이 가능합니다. 
이 경우, 선형 함수로 은닉층을 여러번 추가하더라도 1회 추가한 것과 차이가 없음을 알 수 있습니다.

활성화 함수가 존재하지 않는 선형 함수 층을 사용하지 않는다는 의미는 아닙니다. 
종종 활성화 함수를 사용하지 않는 층을 비선형 층들과 함께 인공 신경망의 일부로서 추가하는 경우도 있는데, 학습 가능한 가중치가 새로 생긴다는 점에서 의미가 있습니다. 
이와 같이 선형 함수를 사용한 층을 활성화 함수를 사용하는 은닉층과 구분하기 위해서,
선형층(linear layer)이나 투사층(projection layer) 등의 다른 표현을 사용하여 표현합니다. 

![image.png](attachment:09906904-7301-4c55-bb9d-2a6d5d188404:image.png)

**은닉층의 수**

- **복잡한 문제일수록 더 많은 층**: 은닉층이 많아질수록 신경망은 더 복잡한 특징을 학습할 수 있어 어려운 예측 문제를 해결하는 데 유리합니다. 일반적으로 딥러닝은 2개 이상의 은닉층을 가진 신경망을 의미합니다.
- **계산 시간 증가**: 층이 많아지면 학습 시간이 길어지고, 과적합(Overfitting) 문제가 발생할 가능성이 높아집니다.
- **오컴의 면도날 원칙 적용**: 유효성 검사 데이터셋에서 성능이 증가하지 않는다면, 불필요한 층은 제거하는 것이 좋습니다. 더 적은 자원과 빠른 학습 속도로 동일한 결과를 얻을 수 있기 때문입니다.

**뉴런의 수**

- **복잡한 특징 학습**: 각 은닉층의 뉴런 수가 많을수록 신경망은 더 많은 패턴을 학습할 수 있습니다.
- **과도한 뉴런 수의 문제**: 뉴런 수가 너무 많아지면 계산량이 늘어나고, 과적합이 발생할 가능성이 커집니다. 반대로 너무 적으면 복잡한 데이터를 충분히 학습하지 못할 수 있습니다.
- **결정 방법**:
    - **경험 기반 규칙**: 입력층 뉴런 수의 1.5배, 입력층과 출력층 뉴런 수의 평균값 등 경험적인 규칙을 활용하는 방법이 있습니다.
    - **하이퍼파라미터 튜닝**: 다양한 뉴런 수를 시도하며 가장 좋은 결과를 보이는 수를 찾는 것이 일반적입니다.
    - **데이터 크기**: 데이터셋의 크기에 맞춰 은닉층의 구성을 정하는 방법도 있습니다.

---

여기서 **층을 쌓는다는건 이전층의 입력을 다음 층의 입력으로 다시 변환하는 “함수의 합성”을 의미.**
이렇게 

![image.png](attachment:c61957a1-44e5-474c-b0bc-838e72ef7a36:image.png)

- f: ReLU, tanh 등 비선형 활성화함수
- 첫 번째 층이 “입력을 변환해서 새로운 특징(h)”을 만듦
- 두 번째 층이 그 특징으로 최종 판단

---

근데 비선형적으로 만들필요가 있는가?

ex) 주가 예측은 선형적인 출력값 하지만 세상의 모든 데이터는 선형적일 수 없음 “거래량, 변동성, 심리 지표, 환율, 뉴스 등 “ 을 보면 알겠지만 이들은 출력인 주가 예측과 선형적인 관계가 아닌 복잡한 비선형 관계

> 신경망은 은닉층의 **비선형 활성화 함수** 를 이용해
입력을 새로운 “비선형 특징 공간(feature space)”으로 변환하고,
그 안에서는 출력과 “거의 선형 관계”가 되도록 만듬
> 

입력 데이터 예시:

| 변수 | 설명 | 값 예시 |
| --- | --- | --- |
| 거래량 | 하루 거래량 | 1.3M |
| 변동성 | 표준편차 등 | 0.05 |
| 심리지표 | 뉴스나 트윗 | +0.7 |
| 환율 | 원/달러 환율 | 1,325 |
| 뉴스지수 | 긍정/부정 점수 | 0.3 |

따라서 입력과 출력의 관계가 비선형일 수 있으므로,은닉층에는 비선형 활성화함수를 사용해야 한다.

# 은닉

예를 들어 첫 번째 은닉층이 이렇게 생겼다고 합시다

![image.png](attachment:93495c87-824a-45f6-ad23-15e9108c2daf:image.png)

---

## 은닉층이 하는 일 (직관적 의미)

| 은닉 뉴런 | 모델이 스스로 학습하는 "특징"의 예시 |
| --- | --- |
| h₁ | “거래량이 급등하고 심리지표가 높을 때 상승 가능성” |
| h₂ | “환율이 오르고 변동성이 낮을 때 안정적 구간” |
| h₃ | “뉴스 감성은 긍정인데 거래량이 줄어드는 이상 패턴” |
| h₄ | “심리지표가 급락 + 환율 상승 조합 = 위험 신호” |

즉, 각 은닉 노드는 **입력 변수들의 조합으로 만들어진 새로운 특징(feature)** 을 나타냅니다.

# 다음 은닉층으로 갈수록?

이제 두 번째 은닉층에서는

앞서 만들어진 특징들을 다시 비선형적으로 조합합니다 

![image.png](attachment:24faf2fb-1f47-40c6-b647-ee6a54583485:image.png)

→ 이 과정에서 점점 더 “고차원적, 추상적 의미”의 특징을 배웁니다.

| 층 | 학습되는 특징 예시 |
| --- | --- |
| 1층 | 단순 변수 조합 (거래량+심리, 환율+뉴스 등) |
| 2층 | 추세 변화 감지 (“심리 + 거래량 조합으로 단기 상승 패턴”) |
| 3층 | 상황 인식 (“시장 불안정 + 긍정뉴스 = 일시 반등”) |

즉, **층이 깊을수록 단순한 입력 조합 → 복합적 패턴으로 추상화** 됩니다.

# 왜 “자동으로” 이런 특징이 생기냐면

모델은 **손실함수(loss)** 를 최소화하려고 파라미터 W,b 를 조정하면서

입력에서 출력(주가)에 도움이 되는 **패턴 방향으로 가중치를 학습**하기 때문이에요.

즉 

- 모델은 주가예측 오차(MSE 등)를 줄이기 위해 학습함.
- 그 과정에서 자연스럽게
    
    “이 변수 조합이 도움이 되더라” → “그 조합을 강하게”
    
    “이 변수는 상관없더라” → “그 가중치 작게”
    
- 결과적으로 은닉층이 “의미 있는 조합(특징)”을 형성

# 초기 상태는 “랜덤”이 맞음

처음 학습 시작 시에는

- 가중치 W,b 모두 **랜덤 초기화(random initialization)**
- 따라서 은닉층이 계산하는 값들도 **아무 의미 없는 랜덤 조합**입니다.

예를 들어 첫 번째 학습 단계에서 은닉 뉴런이 만든 특징은 이런 느낌이에요:

> “심리 0.3 × 환율 0.9 – 거래량 0.2”
> 
> 
> (랜덤한 조합)
> 

---

# 학습이 진행되면서 “의미 있는 특징”으로 진화

이후 손실함수 LLL (예: MSE) 를 줄이기 위해

**경사하강법(gradient descent)** 으로 가중치가 조금씩 업데이트됩니다.

그럼 무슨 일이 일어나냐면

| 단계 | 모델 내부 변화 | 결과 |
| --- | --- | --- |
| 초기 | 랜덤 가중치 | 랜덤한 특징 |
| 학습 중 | 손실 감소 방향으로 W,b 조정 | 점점 “유용한” 조합만 살아남음 |
| 수렴 후 | 입력에서 출력으로의 의미 있는 패턴 형성 | 예: “거래량↑ + 심리↑ → 주가상승” |

즉, 모델은 **오차를 줄이는 방향으로 입력 변수들의 “최적 조합”을 학습**합니다.

이게 바로 딥러닝이 **“feature engineering을 자동으로 하는”** 이유입니다.

---

# 활성화함수의 역할은 “특징의 모양(비선형성)”을 결정하는 것

활성화함수는 “무슨 특징을 학습할지”가 아니라

“어떤 형태의 비선형 변환을 허용할지”를 결정합니다.

| 활성화함수 | 특징 공간의 모양 | 학습되는 패턴 성격 |
| --- | --- | --- |
| **ReLU** | 0 이하 → 0, 0 이상 → 그대로 | 희소(sparse), 직선형 조합 |
| **tanh** | -1~1로 매핑 | 부호 정보 보존, 부드러운 곡선 |
| **sigmoid** | 0~1로 압축 | 확률적 해석, 작은 변화에 민감 |
| **GELU** | 확률적 ReLU 형태 | smoother 비선형성 |

즉

> 활성화함수는 “은닉층이 만들 수 있는 함수의 형태(표현력)”을 정하지않고, “실제 학습되는 의미 있는 특징”은 **데이터와 학습 과정이 만든다.**
> 

---

# 직관적으로 보면

- **활성화함수** = “물감의 색깔”
- **가중치 학습** = “그림을 그리는 손”
- **데이터 + 손실함수** = “그림의 모델(참조 대상)”

즉,

활성화함수는 “붓과 물감”을 주는 역할,

딥러닝 학습 과정은 “이걸로 어떤 그림을 그릴지”를 스스로 찾아가는 과정이에요.

---

# 학습 흐름 예시 (주가예측 딥러닝)

| 단계 | 일어나는 일 |
| --- | --- |
| ① 입력 | 거래량, 변동성, 심리, 환율, 뉴스 |
| ② 초기 은닉층 | 랜덤한 조합 생성 |
| ③ 손실 계산 | 예측 주가 vs 실제 주가 차이 |
| ④ 역전파 | 손실 줄이는 방향으로 W,b 조정 |
| ⑤ 반복 | 점점 의미 있는 조합 학습 |
| ⑥ 결과 | “거래량 급등 + 긍정 뉴스 → 상승” 같은 패턴 자동 학습 |

---

---

# 정리 표

| 구분 | 누가 결정하는가 | 역할 |
| --- | --- | --- |
| **활성화함수 선택 (ReLU, tanh)** | 사람이 설계 | 비선형성의 형태 결정 |
| **특징(feature) 내용** | 모델이 학습 | 데이터 패턴 기반 자동 형성 |
| **가중치 업데이트** | 역전파(Backpropagation) | 손실 최소화 방향으로 조정 |
| **초기 가중치** | 랜덤 | 출발점 (학습이 의미를 부여함) |

---

# 한 문장 요약

> 은닉층의 특징은 처음엔 랜덤하게 시작하지만,
> 
> 
> 손실함수를 최소화하는 방향으로 가중치가 조정되면서
> 
> 데이터 안의 유용한 패턴을 스스로 찾아내는 것이다.
> 
> 활성화함수는 그 특징의 “형태(비선형성)”를 결정할 뿐,
> 
> “무엇을 학습할지”는 데이터와 학습 과정이 정한다.
>


