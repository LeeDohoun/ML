퍼셉트론

![image.png](attachment:27a2a347-76bf-4605-88f0-fb109ac0ba0d:image.png)

각각의 입력값에는 각각의 가중치가 존재하는데, 이때 가중치의 값이 크면 클수록 해당 입력 값이 중요하다는 것을 의미. 
각 입력값이 가중치와 곱해져서 인공뉴런에 보내지고, 각 입력값과 그에 해당되는 가중치의 곱의 전체 합이 임계치를 넘으면 종착지에 있는 인공 뉴런은 출력 신호로서 1을 출력하고, 그렇지 않은 경우에는 0을 출력.
이러한 함수를 계단함수라고하며 이 계단함수는  퍼셉트론의 활성화 함수.

(활성화함수vs목적함수)

![image.png](attachment:85353212-98a5-4b6a-a99a-5ad30c826a05:image.png)

단층 퍼셉트론

위에서 배운 퍼셉트론을 단층 퍼셉트론. 단층과 다층으로 나뉘는데, 
단층 퍼셉트론은 값을 보내는 단계와 값을 받아서 출력하는 두단계로만 존재 이때 각 단계를 **layer라고함.** 
**(값을 보내는 단계는 입력층 , 값을 받아서 출력하는 단계는 출력층)

이전 ML의 선형회귀에서의 회귀와 같음 독립변수들을 과 bias를 선형으로 결합하여 결과 y가 나옴** 

![image.png](attachment:ead96fac-baab-4966-858c-2f571711d3f1:image.png)

![image.png](attachment:b95a5977-f82f-4e0d-a3aa-ea54d68b8dcc:image.png)

AND 게이트를 구현한 코드

```jsx
def AND_gate(x1, x2):
    w1 = 0.5
    w2 = 0.5
    b = -0.5
    result = x1*w1 + x2*w2 + b
    if result <= 0:
        return 0
    else:
        return 1

print(AND_gate(0, 0))  # 0
print(AND_gate(0, 1))  # 0
print(AND_gate(1, 0))  # 0
print(AND_gate(1, 1))  # 1
```

![image.png](attachment:681192f4-e9cf-4a45-91fa-3392b7e44136:image.png)

![image.png](attachment:d4004bff-1a92-40d2-a333-81faf67f57e0:image.png)

코드를 x1과 x2에대한 그래프로 그려보면 두 클래스(0,1)을 분류하는 선이 그어짐.

실습에서 진행한 코드들을 보면 AND,NAND 게이트를 만족하기 위해 파라미터를 설정 하지만 XOR 게이트는 구현불가

<XOR 게이트>

![image.png](attachment:394f81ee-bcbd-48c3-a7c4-0114d2b63197:image.png)

Why??

: 단층 퍼셉트론은 직선 하나로 두 영역을 나눌 수 있는 문제에 대해서만 구현이 가능. 위의 이미지를 보면 최소한 2개의 선이 존재해야함. 이를 해결하기 위해서 나온것이 여러 개의 선으로 분류하는 효과를 얻을 수 있는것이 다층 퍼셉트론

## 다층퍼셉트론

**(MultiLayer Perceptron, MLP)**

 XOR 게이트는 기존의 AND, NAND, OR 게이트를 조합하면 만들 수 있습니다. 퍼셉트론 관점에서 말하면 층을 더 쌓으면 만들 수 있습니다. 다층 퍼셉트론과 단층 퍼셉트론의 차이는 단층 퍼셉트론은 입력층과 출력층만 존재하지만, 다층 퍼셉트론은 중간에 층을 더 추가하였다는 점입니다.

이렇게 입력층과 출력층 사이에 존재하는 층을 **은닉층**이라고함.  (이 은닉층은 사용자가 설정하기 나름)

<XOR 게이트>

![image.png](attachment:19c6393f-06d9-42e2-bb54-6f70df8db7e4:image.png)

![image.png](attachment:bc6d2cb3-4470-4619-b32e-2ff45b9957b4:image.png)

이와같이 은닉층이 2개 이상인 신경망을 **심층 신경망(Deep Neural Network, DNN)** 이라고함.

---

---

### 로지스틱 회귀

- 입력: (키, 몸무게)
- 출력: “남/여 구분”
- 작동: “직선으로 두 그룹을 나누자”
    
    → 즉, “결정 경계가 직선”
    

### 딥러닝

- 입력: (얼굴 이미지 픽셀 10,000개)
- 중간층: “눈, 코, 입 특징” 자동으로 추출
- 출력: “남/여 구분”
    
    → 곡선, 비선형 경계 가능
    
    여기서 **층을 쌓는다는건 이전층의 입력을 다음 층의 입력으로 다시 변환하는 “함수의 합성”을 의미.**
    이렇게 
    

![image.png](attachment:c61957a1-44e5-474c-b0bc-838e72ef7a36:image.png)

- f: ReLU, tanh 등 비선형 활성화함수
- 첫 번째 층이 “입력을 변환해서 새로운 특징(h)”을 만듦
- 두 번째 층이 그 특징으로 최종 판단

---

앞에서 게이트를 만들때 사용한 파라미터는 직접 설정한 파라미터(가중치와 바이어)인데 이를 앞의 ML에서 배운 훈련과 학습을 통해 값을 찾습니다. 그리고 이 학습을시키는 인공 신경망이 심층 신경망일 경우에는 이를 심층 신경망을 학습시킨다고 하여, **딥 러닝(Deep Learning)**이라고 합니다.

선형회귀는 여기서 출력층에서 활성화 함수를 안쓰는 형태입니다.
근데 앞에서 말했듯이 회귀는 연속적인 값인데 애네들은 비선형적으로 만들필요가 있는가?

ex) 주가 예측은 선형적인 출력값 하지만 세상의 모든 데이터는 선형적일 수 없음 “거래량, 변동성, 심리 지표, 환율, 뉴스 등 “ 을 보면 알겠지만 이들은 출력인 주가 예측과 선형적인 관계가 아닌 복잡한 비선형 관계

입력 데이터 예시:

| 변수 | 설명 | 값 예시 |
| --- | --- | --- |
| 거래량(Volume) | 하루 거래량 | 1.3M |
| 변동성(Volatility) | 표준편차 등 | 0.05 |
| 심리지표(Sentiment) | 뉴스나 트윗 감성 | +0.7 |
| 환율(Exchange rate) | 원/달러 환율 | 1,325 |
| 뉴스지수(News Index) | 긍정/부정 점수 | 0.3 |

따라서 입력과 출력의 관계가 비선형일 수 있으므로,은닉층에는 비선형 활성화함수를 사용해야 한다.

# 은닉층에서 일어나는 일

예를 들어 첫 번째 은닉층이 이렇게 생겼다고 합시다 👇

h(1)=f(W(1)x+b(1))h^{(1)} = f(W^{(1)}x + b^{(1)})

h(1)=f(W(1)x+b(1))

- xxx: 입력 벡터 = [거래량, 변동성, 심리, 환율, 뉴스]
- W(1)W^{(1)}W(1): 가중치 행렬
- fff: 활성화함수 (ReLU, tanh 등)

---

## 🎨 은닉층이 하는 일 (직관적 의미)

| 은닉 뉴런 | 모델이 스스로 학습하는 "의미"의 예시 |
| --- | --- |
| h₁ | “거래량이 급등하고 심리지표가 높을 때 상승 가능성” |
| h₂ | “환율이 오르고 변동성이 낮을 때 안정적 구간” |
| h₃ | “뉴스 감성은 긍정인데 거래량이 줄어드는 이상 패턴” |
| h₄ | “심리지표가 급락 + 환율 상승 조합 = 위험 신호” |

즉, 각 은닉 노드는 **입력 변수들의 조합으로 만들어진 새로운 특징(feature)** 을 나타냅니다.

# 3️⃣ 다음 은닉층으로 갈수록?

이제 두 번째 은닉층에서는

앞서 만들어진 특징들을 다시 비선형적으로 조합합니다 👇

h(2)=f(W(2)h(1)+b(2))h^{(2)} = f(W^{(2)}h^{(1)} + b^{(2)})

h(2)=f(W(2)h(1)+b(2))

→ 이 과정에서 점점 더 “고차원적, 추상적 의미”의 특징을 배웁니다.

| 층 | 학습되는 특징 예시 |
| --- | --- |
| 1층 | 단순 변수 조합 (거래량+심리, 환율+뉴스 등) |
| 2층 | 추세 변화 감지 (“심리 + 거래량 조합으로 단기 상승 패턴”) |
| 3층 | 상황 인식 (“시장 불안정 + 긍정뉴스 = 일시 반등”) |

즉, **층이 깊을수록 단순한 입력 조합 → 복합적 패턴으로 추상화** 됩니다.

# 왜 “자동으로” 이런 특징이 생기냐면

모델은 **손실함수(loss)** 를 최소화하려고 파라미터 W,bW, bW,b 를 조정하면서

입력에서 출력(주가)에 도움이 되는 **패턴 방향으로 가중치를 학습**하기 때문이에요.

즉 👇

- 모델은 주가예측 오차(MSE 등)를 줄이기 위해 학습함.
- 그 과정에서 자연스럽게
    
    “이 변수 조합이 도움이 되더라” → “그 조합을 강하게”
    
    “이 변수는 상관없더라” → “그 가중치 작게”
    
- 결과적으로 은닉층이 “의미 있는 조합(특징)”을 형성

# 초기 상태는 “랜덤”이 맞아요

처음 학습 시작 시에는

- 가중치 W,bW, bW,b 모두 **랜덤 초기화(random initialization)**
- 따라서 은닉층이 계산하는 값들도 **아무 의미 없는 랜덤 조합**입니다.

예를 들어 첫 번째 학습 단계에서 은닉 뉴런이 만든 특징은 이런 느낌이에요:

> “심리 0.3 × 환율 0.9 – 거래량 0.2”
> 
> 
> (랜덤한 조합)
> 

---

# 🧠 2️⃣ 학습이 진행되면서 “의미 있는 특징”으로 진화

이후 손실함수 LLL (예: MSE) 를 줄이기 위해

**경사하강법(gradient descent)** 으로 가중치가 조금씩 업데이트됩니다.

그럼 무슨 일이 일어나냐면 👇

| 단계 | 모델 내부 변화 | 결과 |
| --- | --- | --- |
| 초기 | 랜덤 가중치 | 랜덤한 특징 |
| 학습 중 | 손실 감소 방향으로 W,b 조정 | 점점 “유용한” 조합만 살아남음 |
| 수렴 후 | 입력에서 출력으로의 의미 있는 패턴 형성 | 예: “거래량↑ + 심리↑ → 주가상승” |

👉 즉, 모델은 **오차를 줄이는 방향으로 입력 변수들의 “최적 조합”을 학습**합니다.

이게 바로 딥러닝이 **“feature engineering을 자동으로 하는”** 이유입니다.

---

# ⚡ 3️⃣ 활성화함수의 역할은 “특징의 모양(비선형성)”을 결정하는 것

활성화함수는 “무슨 특징을 학습할지”가 아니라

“어떤 형태의 비선형 변환을 허용할지”를 결정합니다.

| 활성화함수 | 특징 공간의 모양 | 학습되는 패턴 성격 |
| --- | --- | --- |
| **ReLU** | 0 이하 → 0, 0 이상 → 그대로 | 희소(sparse), 직선형 조합 |
| **tanh** | -1~1로 매핑 | 부호 정보 보존, 부드러운 곡선 |
| **sigmoid** | 0~1로 압축 | 확률적 해석, 작은 변화에 민감 |
| **GELU** | 확률적 ReLU 형태 | smoother 비선형성 |

즉,

> 활성화함수는 “은닉층이 만들 수 있는 함수의 형태(표현력)”을 정하지만,
> 
> 
> “실제 학습되는 의미 있는 특징”은 **데이터와 학습 과정이 만든다.**
> 

---

# 🧩 4️⃣ 직관적으로 보면

- **활성화함수** = “물감의 색깔”
- **가중치 학습** = “그림을 그리는 손”
- **데이터 + 손실함수** = “그림의 모델(참조 대상)”

즉,

활성화함수는 “붓과 물감”을 주는 역할,

딥러닝 학습 과정은 “이걸로 어떤 그림을 그릴지”를 스스로 찾아가는 과정이에요.

---

# 📊 5️⃣ 학습 흐름 예시 (주가예측 딥러닝)

| 단계 | 일어나는 일 |
| --- | --- |
| ① 입력 | 거래량, 변동성, 심리, 환율, 뉴스 |
| ② 초기 은닉층 | 랜덤한 조합 생성 |
| ③ 손실 계산 | 예측 주가 vs 실제 주가 차이 |
| ④ 역전파 | 손실 줄이는 방향으로 W,b 조정 |
| ⑤ 반복 | 점점 의미 있는 조합 학습 |
| ⑥ 결과 | “거래량 급등 + 긍정 뉴스 → 상승” 같은 패턴 자동 학습 |

---

# 🧮 6️⃣ 수학적으로 표현하면

은닉층의 출력:

h=f(Wx+b)h = f(Wx + b)

h=f(Wx+b)

출력층 예측:

y^=Wouth+bout\hat{y} = W_{out} h + b_{out}

y^=Wouth+bout

손실함수:

L=(y^−y)2L = (\hat{y} - y)^2

L=(y^−y)2

→ 역전파(backpropagation)로 ∂L∂W\frac{\partial L}{\partial W}∂W∂L 계산

→ 가중치 갱신:

W:=W−η∂L∂WW := W - \eta \frac{\partial L}{\partial W}

W:=W−η∂W∂L

이 반복 과정이 “어떤 조합이 주가 예측에 유용한지”를 자동으로 찾아냅니다.

---

# ⚙️ 7️⃣ 정리 표

| 구분 | 누가 결정하는가 | 역할 |
| --- | --- | --- |
| **활성화함수 선택 (ReLU, tanh)** | 사람이 설계 | 비선형성의 형태 결정 |
| **특징(feature) 내용** | 모델이 학습 | 데이터 패턴 기반 자동 형성 |
| **가중치 업데이트** | 역전파(Backpropagation) | 손실 최소화 방향으로 조정 |
| **초기 가중치** | 랜덤 | 출발점 (학습이 의미를 부여함) |

---

# 💬 한 문장 요약

> 은닉층의 특징은 처음엔 랜덤하게 시작하지만,
> 
> 
> 손실함수를 최소화하는 방향으로 가중치가 조정되면서
> 
> 데이터 안의 유용한 패턴을 스스로 찾아내는 것이다.
> 
> 활성화함수는 그 특징의 “형태(비선형성)”를 결정할 뿐,
> 
> “무엇을 학습할지”는 데이터와 학습 과정이 정한다.
> 

---

---

## **1. 피드 포워드 신경망(Feed-Forward Neural Network, FFNN)**

![](https://wikidocs.net/images/page/24987/mlp_final.PNG)

위 그림의 다층 퍼셉트론(MLP)과 같이 오직 입력층에서 출력층 방향으로 연산이 전개되는 신경망을 피드 포워드 신경망(Feed-Forward Neural Network, FFNN)이라고 합니다.

![](https://wikidocs.net/images/page/24987/rnn_final.PNG)

위의 그림은 FFNN에 속하지 않는 RNN이라는 신경망을 보여줍니다. 
이 신경망은 은닉층의 출력값을 출력층으로도 값을 보내지만, 동시에 은닉층의 출력값이 다시 은닉층의 입력으로 사용됩니다.

## **2. 전결합층(Fully-connected layer, FC, Dense layer)**

다층 퍼셉트론은 은닉층과 출력층에 있는 모든 뉴런은 바로 이전 층의 모든 뉴런과 연결돼 있었습니다. 
그와 같이 어떤 층의 모든 뉴런이 이전 층의 모든 뉴런과 연결돼 있는 층을 전결합층(Fully-connected layer) 또는 완전연결층이라고 합니다. 
줄여서 FC라고 부르기도 합니다.
앞서 본 다층 퍼셉트론의 모든 은닉층과 출력층은 **전결합층**입니다. 동일한 의미로 **밀집층(Dense layer)** 이라고 부르기도 하는데, 
케라스에서는 밀집층을 구현할 때 Dense()를 사용합니다.

## **3. 활성화 함수(Activation Function)**

![](https://wikidocs.net/images/page/24987/%ED%8D%BC%EC%85%89%ED%8A%B8%EB%A1%A0%EA%B3%BC_%ED%99%9C%EC%84%B1%ED%99%94%ED%95%A8%EC%88%98.PNG)

앞서 배운 퍼셉트론에서는 계단 함수(Step function)를 통해 출력값이 0이 될지, 1이 될지를 결정했습니다. 
이러한 매커니즘은 실제 뇌를 구성하는 신경 세포 뉴런이 전위가 일정치 이상이 되면 시냅스가 서로 화학적으로 연결되는 모습을 모방한 것입니다. 
이렇게 은닉층과 출력층의 뉴런에서 출력값을 결정하는 함수를 활성화 함수(Activation function)라고 하는데 
계단 함수는 이러한 활성화 함수의 하나의 예제에 불과합니다.

다양한 활성화 함수에 대해서 정리

### **(1) 활성화 함수의 특징 - 비선형 함수(Nonlinear function)**

활성화 함수의 특징은 선형 함수가 아닌 비선형 함수여야 한다는 점입니다.
 선형 함수란 출력이 입력의 선형결합 식으로 나타낼수 있으면 선형함수라고 합니다. 

예를 들어   f(x) = wx +b    라는 함수가 있을 때, w 와 b는 상수입니다. 이 식을 그래프로 시각화하면 직선입니다. 

반대로 비선형 함수는 출력이 입력의 선형결합으로 나타낼수 없으며, 직선 1개로는 그릴 수 없는 함수를 말합니다.

인공 신경망에서 활성화 함수는 비선형 함수여야 합니다.
인공 신경망의 능력을 높이기 위해서는 은닉층을 계속해서 추가해야 합니다. 그런데 만약 활성화 함수로 선형 함수를 사용하게 되면 은닉층을 쌓을 수가 없습니다. 
예를 들어 활성화 함수로 선형 함수를 선택하고, 층을 계속 쌓는다고 가정해보겠습니다.
 활성화 함수는    f(x) = wx      라고 가정합니다. 여기다가 은닉층을 두 개 추가한다고하면 출력층을 포함해서     y(x) = f(f(f(x)))    가 됩니다. 이를 식으로 표현하면       w*w*w*x      입니다. 
그런데 이는 잘 생각해보면     w    의 세 제곱값을    k      라고 정의해버리면            y(x) =  kx       와 같이 다시 표현이 가능합니다. 
이 경우, 선형 함수로 은닉층을 여러번 추가하더라도 1회 추가한 것과 차이가 없음을 알 수 있습니다.

활성화 함수가 존재하지 않는 선형 함수 층을 사용하지 않는다는 의미는 아닙니다. 종종 활성화 함수를 사용하지 않는 층을 비선형 층들과 함께 인공 신경망의 일부로서 추가하는 경우도 있는데, 학습 가능한 가중치가 새로 생긴다는 점에서 의미가 있습니다. 
이와 같이 선형 함수를 사용한 층을 활성화 함수를 사용하는 은닉층과 구분하기 위해서,
선형층(linear layer)이나 투사층(projection layer) 등의 다른 표현을 사용하여 표현합니다. 

뒤의 챕터에서 언급할 임베딩 층(embedding layer)도 일종의 선형층입니다. 임베딩 층에는 활성화 함수가 존재하지 않습니다. 

파이썬을 통해 주로 사용되는 활성화 함수를 직접 그려봅시다.

```python
import numpyas np
import matplotlib.pyplotas plt
```

### **(2) 계단 함수(Step function)**

![](https://wikidocs.net/images/page/24987/step_function.PNG)

```python
defstep(x):
return np.array(x > 0, dtype=np.int)
x = np.arange(-5.0, 5.0, 0.1) # -5.0부터 5.0까지 0.1 간격 생성
y = step(x)
plt.title('Step Function')
plt.plot(x,y)
plt.show()

```

계단 함수는 거의 사용되지 않지만 퍼셉트론을 통해 인공 신경망을 처음 배울 때 접하게 되는 활성화 함수입니다.

### **(3) 시그모이드 함수(Sigmoid function)와 기울기 소실**

시그모이드 함수를 사용한 인공 신경망이 있다고 가정해보겠습니다.

![](https://wikidocs.net/images/page/24987/%EC%8B%9C%EA%B7%B8%EB%AA%A8%EC%9D%B4%EB%93%9C.PNG)

위 인공 신경망의 학습 과정은 다음과 같습니다. 
우선 인공 신경망은 입력에 대해서 순전파(forward propagation) 연산을 하고, 그리고 순전파 연산을 통해 나온 예측값과 실제값의 오차를 손실 함수(loss function)을 통해 계산하고, 
그리고 이 손실(오차라고도 부릅니다. loss)을 미분을 통해서 기울기(gradient)를 구하고, 
이를 통해 출력층에서 입력층 방향으로 가중치와 편향을 업데이트 하는 과정인 역전파(back propagation)를 수행합니다. 
역전파에 대해서는 뒤에서 더 자세히 설명하겠지만 일단 여기에서는 인공 신경망에서 출력층에서 입력층 방향으로 가중치와 편향을 업데이트 하는 과정이라고만 언급해두겠습니다.
 역전파 과정에서 인공 신경망은 경사 하강법을 사용합니다.

이 시그모이드 함수의 문제점은 미분을 해서 기울기(gradient)를 구할 때 발생합니다.

```python
# 시그모이드 함수 그래프를 그리는 코드
defsigmoid(x):
return 1/(1+np.exp(-x))
x = np.arange(-5.0, 5.0, 0.1)
y = sigmoid(x)

plt.plot(x, y)
plt.plot([0,0],[1.0,0.0], ':') # 가운데 점선 추가
plt.title('Sigmoid Function')
plt.show()

```

![](https://wikidocs.net/images/page/60683/%EC%8B%9C%EA%B7%B8%EB%AA%A8%EC%9D%B4%EB%93%9C%ED%95%A8%EC%88%981.PNG)

위 그래프는 시그모이드 함수의 그래프를 보여줍니다. 시그모이드 함수의 출력값이 0 또는 1에 가까워지면, 그래프의 기울기가 완만해지는 모습을 볼 수 있습니다. 기울기가 완만해지는 구간을 주황색, 그렇지 않은 구간을 초록색으로 칠해보겠습니다.

![](https://wikidocs.net/images/page/60683/%EC%8B%9C%EA%B7%B8%EB%AA%A8%EC%9D%B4%EB%93%9C%ED%95%A8%EC%88%982.PNG)

주황색 구간에서는 미분값이 0에 가까운 아주 작은 값입니다. 초록색 구간에서의 미분값은 최대값이 0.25입니다. 
다시 말해 시그모이드 함수를 미분한 값은 적어도 0.25 이하의 값입니다. 
시그모이드 함수를 활성화 함수로하는 인공 신경망의 층을 쌓는다면, 가중치와 편향을 업데이트 하는 과정인 역전파 과정에서 0에 가까운 값이 누적해서 곱해지게 되면서, 앞단에는 기울기(미분값)가 잘 전달되지 않게 됩니다. 
이러한 현상을 **기울기 소실(Vanishing Gradient) 문제**라고 합니다.

시그모이드 함수를 사용하는 은닉층의 개수가 다수가 될 경우에는 0에 가까운 기울기가 계속 곱해지면 앞단에서는 거의 기울기를 전파받을 수 없게 됩니다. 다시 말해 매개변수 가 업데이트 되지 않아 학습이 되지를 않습니다.

![](https://wikidocs.net/images/page/60683/%EA%B8%B0%EC%9A%B8%EA%B8%B0_%EC%86%8C%EC%8B%A4.png)

위의 그림은 은닉층이 깊은 신경망에서 기울기 소실 문제로 인해 출력층과 가까운 은닉층에서는 기울기가 잘 전파되지만, 앞단으로 갈수록 기울기가 제대로 전파되지 않는 모습을 보여줍니다. 결론적으로 시그모이드 함수의 은닉층에서의 사용은 지양됩니다. 
시그모이드 함수는 주로 이진 분류를 위해 출력층에서 사용합니다.

### **(4) 하이퍼볼릭탄젠트 함수(Hyperbolic tangent function)**

하이퍼볼릭탄젠트 함수(tanh)는 입력값을 -1과 1사이의 값으로 변환합니다. 그래프를 그려보겠습니다.

```python
x = np.arange(-5.0, 5.0, 0.1) # -5.0부터 5.0까지 0.1 간격 생성
y = np.tanh(x)

plt.plot(x, y)
plt.plot([0,0],[1.0,-1.0], ':')
plt.axhline(y=0, color='orange', linestyle='--')
plt.title('Tanh Function')
plt.show()

```

![](https://wikidocs.net/images/page/60683/%ED%95%98%EC%9D%B4%ED%8D%BC%EB%B3%BC%EB%A6%AD%ED%83%84%EC%A0%A0%ED%8A%B8.PNG)

하이퍼볼릭탄젠트 함수도 -1과 1에 가까운 출력값을 출력할 때, 
시그모이드 함수와 같은 문제가 발생합니다.
 그러나 하이퍼볼릭탄젠트 함수의 경우에는 시그모이드 함수와는 달리 0을 중심으로 하고있으며 하이퍼볼릭탄젠트 함수를 미분했을 때의 최대값은 1로 시그모이드 함수의 최대값인 0.25보다는 큽니다. 
다시 말해 미분했을 때 시그모이드 함수보다는 전반적으로 큰 값이 나오게 됩니다.
 그래서 시그모이드 함수보다는 기울기 소실 증상이 적은 편이며 은닉층에서 시그모이드 함수보다는 선호됩니다.

### **(5) 렐루 함수(ReLU)**

인공 신경망의 은닉층에서 가장 인기있는 함수입니다. 수식은  f(x) = max(0,x)  로 아주 간단합니다.

```python
defrelu(x):
return np.maximum(0, x)

x = np.arange(-5.0, 5.0, 0.1)
y = relu(x)

plt.plot(x, y)
plt.plot([0,0],[5.0,0.0], ':')
plt.title('Relu Function')
plt.show()

```

![](https://wikidocs.net/images/page/60683/%EB%A0%90%EB%A3%A8%ED%95%A8%EC%88%98.PNG)

렐루 함수는 음수를 입력하면 0을 출력하고, 양수를 입력하면 입력값을 그대로 반환하는 것이 특징인 함수로 
출력값이 특정 양수값에 수렴하지 않습니다. 0이상의 입력값의 경우에는 미분값이 항상 1입니다.
 깊은 신경망의 은닉층에서 시그모이드 함수보다 훨씬 더 잘 작동합니다. 뿐만 아니라, 렐루 함수는 시그모이드 함수와 하이퍼볼릭탄젠트 함수와 같이 어떤 연산이 필요한 것이 아니라 단순 임계값이므로 연산 속도도 빠릅니다.

하지만 여전히 문제점이 존재하는데, 입력값이 음수면 기울기. 즉, 미분값도 0이 됩니다.
 그리고 이 뉴런은 다시 회생하는 것이 매우 어렵습니다. 이 문제를 죽은 렐루(dying ReLU)라고 합니다.

### **(6) 리키 렐루(Leaky ReLU)**

죽은 렐루를 보완하기 위해 ReLU의 변형 함수들이 등장하기 시작했습니다. 변형 함수는 여러 개가 있지만 여기서는 Leaky ReLU에 대해서만 소개합니다. Leaky ReLU는 입력값이 음수일 경우에 0이 아니라 0.001과 같은 매우 작은 수를 반환하도록 되어있습니다. 수식은   f(x) = max(ax,x)   로 아주 간단합니다. a는 하이퍼파라미터로 Leaky('새는') 정도를 결정하며 일반적으로는 0.01의 값을 가집니다. 여기서 말하는 '새는 정도'라는 것은 입력값의 음수일 때의 기울기를 비유하고 있습니다.

```python
a = 0.1

defleaky_relu(x):
return np.maximum(a*x, x)

x = np.arange(-5.0, 5.0, 0.1)
y = leaky_relu(x)

plt.plot(x, y)
plt.plot([0,0],[5.0,0.0], ':')
plt.title('Leaky ReLU Function')
plt.show()

```

![](https://wikidocs.net/images/page/60683/%EB%A6%AC%ED%82%A4%EB%A0%90%EB%A3%A8.PNG)

위의 그래프에서는 새는 모습을 확실히 보여주기 위해 a를 0.1로 잡았습니다. 위와 같이 입력값이 음수라도 기울기가 0이 되지 않으면 ReLU는 죽지 않습니다.

### **(7) 소프트맥스 함수(Softmax function)**

은닉층에서는 ReLU(또는 ReLU 변형) 함수들을 사용하는 것이 일반적입니다. 반면, 
소프트맥스 함수는 시그모이드 함수처럼 출력층에서 주로 사용됩니다. 
시그모이드 함수가 두 가지 선택지 중 하나를 고르는 이진 분류 (Binary Classification) 문제에 사용된다면 
소프트맥스 함수는 세 가지 이상의 (상호 배타적인) 선택지 중 하나를 고르는 다중 클래스 분류(MultiClass Classification) 문제에 주로 사용됩니다. 
다시 말해서 
딥 러닝으로 이진 분류를 할 때는 출력층에 앞서 배운 로지스틱 회귀를 사용하고, 
딥 러닝으로 다중 클래스 분류 문제를 풀 때는 출력층에 소프트맥스 회귀를 사용한다고 생각할 수 있습니다.

```python
x = np.arange(-5.0, 5.0, 0.1) # -5.0부터 5.0까지 0.1 간격 생성
y = np.exp(x) / np.sum(np.exp(x))

plt.plot(x, y)
plt.title('Softmax Function')
plt.show()

```

![](https://wikidocs.net/images/page/60683/%EC%86%8C%ED%94%84%ED%8A%B8%EB%A7%A5%EC%8A%A4.PNG)